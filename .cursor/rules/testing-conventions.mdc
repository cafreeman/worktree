---
globs: tests/*.rs,src/**/*test*.rs
---

# Testing Conventions

## Test Structure

- Integration tests in [tests/](mdc:tests/) directory
- Each command has its own test file (e.g., [create_tests.rs](mdc:tests/create_tests.rs))
- Shared utilities in [test_helpers.rs](mdc:tests/test_helpers.rs)

## Test Environment

- Use `tempfile::TempDir` for isolated filesystem operations
- Use `temp-env` for environment variable manipulation
- Mock Git operations using the GitOperations trait from [traits.rs](mdc:src/traits.rs)

## Test Patterns

- Set up clean temporary directories for each test
- Test both success and error cases
- Verify file system state after operations
- Test command-line argument parsing
- Use descriptive test names that explain the scenario

## Example Test Structure

```rust
use tempfile::TempDir;
use worktree::Result;

#[test]
fn test_command_success_case() -> Result<()> {
    let temp_dir = TempDir::new()?;
    // Test setup
    // Execute command
    // Verify results
    Ok(())
}
```

## Common Assertions

- File/directory existence
- Git repository state
- Command output content
- Error message content for failure cases
