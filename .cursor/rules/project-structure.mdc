---
alwaysApply: true
---

# Worktree CLI Project Structure

This is a Rust CLI tool for managing git worktrees with enhanced features. The project follows a modular architecture:

## Main Entry Points

- [main.rs](mdc:src/main.rs) - CLI interface using clap with subcommands
- [lib.rs](mdc:src/lib.rs) - Library exports and module declarations

## Core Modules

- [commands/](mdc:src/commands/) - CLI command implementations (create, list, remove, status, sync_config)
- [config/](mdc:src/config/) - Configuration management for .worktree-config.toml
- [git/](mdc:src/git/) - Git operations wrapper around git2 crate
- [storage/](mdc:src/storage/) - Worktree storage management in ~/.worktrees/
- [traits.rs](mdc:src/traits.rs) - GitOperations trait for testability

## Dependencies & Configuration

- [Cargo.toml](mdc:Cargo.toml) - Dependencies and comprehensive clippy lint configuration
- [clippy.toml](mdc:clippy.toml) - Additional clippy settings (MSRV 1.70.0)

## Key Features

- Centralized worktree storage in `~/.worktrees/<repo>/<branch>/`
- Automatic config file copying based on patterns
- Branch name sanitization for filesystem safety
- Comprehensive error handling with anyhow::Result

## Testing

All commands have corresponding integration tests in [tests/](mdc:tests/) using tempfile for isolated testing environments.
