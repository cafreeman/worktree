---
globs: src/main.rs,src/commands/*.rs
---

# CLI Development Guidelines

## Command Structure

The CLI uses clap with derive macros in [main.rs](mdc:src/main.rs):

- `Commands` enum defines all subcommands
- Each command has its own module in [commands/](mdc:src/commands/)
- Command implementations return `anyhow::Result<()>`

## Available Commands

- `create` - Create new worktrees with branch management
- `list` - List worktrees with filtering options
- `remove` - Remove worktrees with optional branch deletion
- `status` - Show comprehensive worktree status
- `sync-config` - Synchronize config files between worktrees

## Argument Patterns

- Use `#[arg(short, long)]` for common flags
- Provide meaningful help text for all arguments
- Use `Option<T>` for optional arguments
- Use boolean flags for toggle behavior

## Command Implementation

Each command module should:

1. Export a main function matching the CLI signature
2. Handle all error cases gracefully
3. Provide user-friendly output
4. Follow the storage conventions for worktree paths
5. Use the GitOperations trait for Git interactions

## Storage Conventions

- Worktrees stored in `~/.worktrees/<repo-name>/<sanitized-branch-name>/`
- Branch names with slashes converted to hyphens for filesystem safety
- Preserve original branch names in Git operations

## Output Guidelines

- Use clear, actionable messages
- Show progress for long-running operations
- Provide helpful error messages with next steps
- Format output consistently across commands
