---
globs: src/git/*.rs,src/traits.rs
---

# Git Operations

## GitOperations Trait

The [GitOperations trait](mdc:src/traits.rs) abstracts git2 operations for testability:

- `open(path)` - Open repository
- `get_repo_path()` - Get repository path
- `branch_exists(name)` - Check branch existence
- `create_worktree(branch, path, create_branch)` - Create new worktree
- `remove_worktree(name)` - Remove worktree
- `list_worktrees()` - List all worktrees
- `delete_branch(name)` - Delete branch
- `inherit_config(worktree_path)` - Copy parent repo config to worktree

## Implementation Standards

- All methods return `anyhow::Result<T>` with detailed error context
- Use git2 crate with proper resource cleanup
- Handle edge cases (missing repos, invalid branches, etc.)
- Create mock implementations for testing

## Common Pattern

```rust
use anyhow::{Context, Result};
use git2::Repository;

fn git_operation() -> Result<()> {
    let repo = Repository::open(path)
        .context("Failed to open git repository")?;
    // ... git operations
    Ok(())
}
```
